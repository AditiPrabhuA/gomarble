{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["file:///Users/aditi/Desktop/gomarble/frontend/src/app/page.tsx"],"sourcesContent":["const fetchReviews = async (page: number) => {\n  setLoading(true);\n  setError(null);\n\n  try {\n    console.log(`Fetching reviews for URL: ${url}, page: ${page}`); // Debug log\n    \n    const response = await fetch(\n      `/api/reviews?url=${encodeURIComponent(url)}&page=${page}`,\n      {\n        headers: {\n          'Accept': 'application/json',\n        },\n      }\n    );\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));\n      throw new Error(errorData.detail || 'Failed to fetch reviews');\n    }\n\n    const data: ReviewsResponse = await response.json();\n    console.log('Received data:', data); // Debug log\n    \n    if (page === 1) {\n      setReviews(data.reviews);\n    } else {\n      setReviews(prev => [...prev, ...data.reviews]);\n    }\n    \n    setHasNextPage(data.has_next_page);\n    setTotalReviews(data.total_reviews);\n    setCurrentPage(page);\n  } catch (err) {\n    console.error('Error fetching reviews:', err); // Debug log\n    setError(err instanceof Error ? err.message : 'An error occurred while fetching reviews');\n  } finally {\n    setLoading(false);\n  }\n};"],"names":[],"mappings":"AAAA,MAAM,eAAe,OAAO;IAC1B,WAAW;IACX,SAAS;IAET,IAAI;QACF,QAAQ,GAAG,CAAC,CAAC,0BAA0B,EAAE,IAAI,QAAQ,EAAE,MAAM,GAAG,YAAY;QAE5E,MAAM,WAAW,MAAM,MACrB,CAAC,iBAAiB,EAAE,mBAAmB,KAAK,MAAM,EAAE,MAAM,EAC1D;YACE,SAAS;gBACP,UAAU;YACZ;QACF;QAGF,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC;oBAAE,QAAQ;gBAAgB,CAAC;YAChF,MAAM,IAAI,MAAM,UAAU,MAAM,IAAI;QACtC;QAEA,MAAM,OAAwB,MAAM,SAAS,IAAI;QACjD,QAAQ,GAAG,CAAC,kBAAkB,OAAO,YAAY;QAEjD,IAAI,SAAS,GAAG;YACd,WAAW,KAAK,OAAO;QACzB,OAAO;YACL,WAAW,CAAA,OAAQ;uBAAI;uBAAS,KAAK,OAAO;iBAAC;QAC/C;QAEA,eAAe,KAAK,aAAa;QACjC,gBAAgB,KAAK,aAAa;QAClC,eAAe;IACjB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,2BAA2B,MAAM,YAAY;QAC3D,SAAS,eAAe,QAAQ,IAAI,OAAO,GAAG;IAChD,SAAU;QACR,WAAW;IACb;AACF"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/aditi/Desktop/gomarble/frontend/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AA0BA,8BAA8B;AAzB9B,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAEzE,cAAc;AAGd,SAASE,IAAI,EAAEC,KAAK,GAAE;AAWtB,OAAO,MAAMG,eAAe;AAG5B,EAAC;;;;;;;;;;AAED,cAAc,qCAAoC,sBAAA;AAElD,UAAA,kDAA4D;AAC5D,MAAA,CAAO,MAAMK;IAAAA;IAAAA,SAAc,IAAIX,mBAAmB;YAChDY,QAAAA;YAAAA,GAAY;YAAA;iBACVC,MAAMZ,UAAUa,QAAQ;sBACxBC,IAAAA,CAAM,CAAA;gBAAA,QAAA;oBAAA,IAAA;oBAAA;iBAAA;;eACNC,UAAU;;SACV,2CAA2C;cAC3CC,IAAAA;YAAAA,GAAY,GAAA;iBACZC,MAAAA,IAAU,IAAA;wBAAA;4BACVC,KAAAA,CAAAA,GAAAA,2KAAAA,CAAAA,KAAU,EAAE,eAAA,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACd,OAAA,GAAA,iTAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACAC,MAAU,CAAA,YAAA,CAAA;;qBACRC,YAAYnB;aACd;QACF,CAAE;QAAA,UAAA;YAAA,IAAA;YAAA;SAAA","ignoreList":[0]}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}